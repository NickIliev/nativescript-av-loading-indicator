"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application_1 = require("tns-core-modules/application");
// Row 1
// BallPulseIndicator
// BallGridPulseIndicator
// BallClipRotateIndicator
// BallClipRotatePulseIndicator
function onCreatingBallClipRotateIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallClipRotateIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallClipRotateIndicator = onCreatingBallClipRotateIndicator;
function onCreatingBallGridPulseIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallGridPulseIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallGridPulseIndicator = onCreatingBallGridPulseIndicator;
function onCreatingBallPulseIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallPulseIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallPulseIndicator = onCreatingBallPulseIndicator;
function onCreatingBallClipRotatePulseIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallClipRotatePulseIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallClipRotatePulseIndicator = onCreatingBallClipRotatePulseIndicator;
// Row 2
// SquareSpinIndicator
// BallClipRotateMultipleIndicator
// BallPulseRiseIndicator
// BallRotateIndicator
function onCreatingSquareSpinIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("SquareSpinIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingSquareSpinIndicator = onCreatingSquareSpinIndicator;
function onCreatingBallClipRotateMultipleIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallClipRotateMultipleIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallClipRotateMultipleIndicator = onCreatingBallClipRotateMultipleIndicator;
function onCreatingBallPulseRiseIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallPulseRiseIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallPulseRiseIndicator = onCreatingBallPulseRiseIndicator;
function onCreatingBallRotateIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallRotateIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallRotateIndicator = onCreatingBallRotateIndicator;
// Row 3
// CubeTransitionIndicator
// BallZigZagIndicator
// BallZigZagDeflectIndicator
// BallTrianglePathIndicator
function onCreatingCubeTransitionIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("CubeTransitionIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingCubeTransitionIndicator = onCreatingCubeTransitionIndicator;
function onCreatingBallZigZagIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallZigZagIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallZigZagIndicator = onCreatingBallZigZagIndicator;
function onCreatingBallZigZagDeflectIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallZigZagDeflectIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallZigZagDeflectIndicator = onCreatingBallZigZagDeflectIndicator;
function onCreatingBallTrianglePathIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallTrianglePathIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallTrianglePathIndicator = onCreatingBallTrianglePathIndicator;
// Row 4
// BallScaleIndicator
// LineScaleIndicator
// LineScalePartyIndicator
// BallScaleMultipleIndicator
function onCreatingBallScaleIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallScaleIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallScaleIndicator = onCreatingBallScaleIndicator;
function onCreatingLineScaleIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("LineScaleIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingLineScaleIndicator = onCreatingLineScaleIndicator;
function onCreatingLineScalePartyIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("LineScalePartyIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingLineScalePartyIndicator = onCreatingLineScalePartyIndicator;
function onCreatingBallScaleMultipleIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallScaleMultipleIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallScaleMultipleIndicator = onCreatingBallScaleMultipleIndicator;
// Row 5
// BallPulseSyncIndicator
// BallBeatIndicator
// LineScalePulseOutIndicator
// LineScalePulseOutRapidIndicator
function onCreatingBallPulseSyncIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallPulseSyncIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallPulseSyncIndicator = onCreatingBallPulseSyncIndicator;
function onCreatingBallBeatIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallBeatIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallBeatIndicator = onCreatingBallBeatIndicator;
function onCreatingLineScalePulseOutIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("LineScalePulseOutIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingLineScalePulseOutIndicator = onCreatingLineScalePulseOutIndicator;
function onCreatingLineScalePulseOutRapidIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("LineScalePulseOutRapidIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingLineScalePulseOutRapidIndicator = onCreatingLineScalePulseOutRapidIndicator;
// Row 6
// BallScaleRippleIndicator
// BallScaleRippleMultipleIndicator
// BallSpinFadeLoaderIndicator
// LineSpinFadeLoaderIndicator
function onCreatingBallScaleRippleIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallScaleRippleIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallScaleRippleIndicator = onCreatingBallScaleRippleIndicator;
function onCreatingBallScaleRippleMultipleIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallScaleRippleMultipleIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallScaleRippleMultipleIndicator = onCreatingBallScaleRippleMultipleIndicator;
function onCreatingBallSpinFadeLoaderIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallSpinFadeLoaderIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallSpinFadeLoaderIndicator = onCreatingBallSpinFadeLoaderIndicator;
function onCreatingLineSpinFadeLoaderIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("LineSpinFadeLoaderIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingLineSpinFadeLoaderIndicator = onCreatingLineSpinFadeLoaderIndicator;
// Row 7
// TriangleSkewSpinIndicator
// PacmanIndicator
// BallGridBeatIndicator
// SemiCircleSpinIndicator
function onCreatingTriangleSkewSpinIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("TriangleSkewSpinIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingTriangleSkewSpinIndicator = onCreatingTriangleSkewSpinIndicator;
function onCreatingPacmanIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("PacmanIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingPacmanIndicator = onCreatingPacmanIndicator;
function onCreatingBallGridBeatIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("BallGridBeatIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingBallGridBeatIndicator = onCreatingBallGridBeatIndicator;
function onCreatingSemiCircleSpinIndicator(args) {
    var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
    indicatorView.setIndicator("SemiCircleSpinIndicator");
    indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
    args.view = indicatorView;
}
exports.onCreatingSemiCircleSpinIndicator = onCreatingSemiCircleSpinIndicator;
// export function onShow() {
//     indicatorView.show();
// }
// export function onHide() {
//     indicatorView.hide();
// }
//# sourceMappingURL=data:application/json;base64,