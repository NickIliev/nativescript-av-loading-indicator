"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application_1 = require("tns-core-modules/application");
var platform_1 = require("tns-core-modules/platform");
// Row 1
// BallPulseIndicator
// BallGridPulseIndicator
// BallClipRotateIndicator
// BallClipRotatePulseIndicator
function onCreatingBallClipRotateIndicator(args) {
    if (platform_1.isAndroid) {
        var indicatorView = new com.wang.avi.AVLoadingIndicatorView(application_1.android.context);
        indicatorView.setIndicator("BallClipRotateIndicator");
        indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
        args.view = indicatorView;
    }
    else {
        var indicatorView = DGActivityIndicatorView.alloc().initWithTypeTintColorAndSize(DGActivityIndicatorAnimationTypeDoubleBounce, UIColor.white(), 20);
        indicatorView.frame = CGRectMake(0, 0, 50, 50);
        args.view = indicatorView;
        // DGActivityIndicatorView *activityIndicatorView = [[DGActivityIndicatorView alloc] initWithType:DGActivityIndicatorAnimationTypeDoubleBounce tintColor:[UIColor whiteColor] size:20.0f];
        // activityIndicatorView.frame = CGRectMake(0.0f, 0.0f, 50.0f, 50.0f);
        // [self.view addSubview:activityIndicatorView];
        // [activityIndicatorView startAnimating];
    }
}
exports.onCreatingBallClipRotateIndicator = onCreatingBallClipRotateIndicator;
// export function onCreatingBallGridPulseIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallGridPulseIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallPulseIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallPulseIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallClipRotatePulseIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallClipRotatePulseIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// Row 2
// SquareSpinIndicator
// BallClipRotateMultipleIndicator
// BallPulseRiseIndicator
// BallRotateIndicator
// export function onCreatingSquareSpinIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("SquareSpinIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallClipRotateMultipleIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallClipRotateMultipleIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallPulseRiseIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallPulseRiseIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallRotateIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallRotateIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// Row 3
// CubeTransitionIndicator
// BallZigZagIndicator
// BallZigZagDeflectIndicator
// BallTrianglePathIndicator
// export function onCreatingCubeTransitionIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("CubeTransitionIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallZigZagIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallZigZagIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallZigZagDeflectIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallZigZagDeflectIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallTrianglePathIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallTrianglePathIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// Row 4
// BallScaleIndicator
// LineScaleIndicator
// LineScalePartyIndicator
// BallScaleMultipleIndicator
// export function onCreatingBallScaleIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallScaleIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingLineScaleIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("LineScaleIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingLineScalePartyIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("LineScalePartyIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallScaleMultipleIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallScaleMultipleIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// Row 5
// BallPulseSyncIndicator
// BallBeatIndicator
// LineScalePulseOutIndicator
// LineScalePulseOutRapidIndicator
// export function onCreatingBallPulseSyncIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallPulseSyncIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallBeatIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallBeatIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingLineScalePulseOutIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("LineScalePulseOutIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingLineScalePulseOutRapidIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("LineScalePulseOutRapidIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// Row 6
// BallScaleRippleIndicator
// BallScaleRippleMultipleIndicator
// BallSpinFadeLoaderIndicator
// LineSpinFadeLoaderIndicator
// export function onCreatingBallScaleRippleIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallScaleRippleIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallScaleRippleMultipleIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallScaleRippleMultipleIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallSpinFadeLoaderIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallSpinFadeLoaderIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingLineSpinFadeLoaderIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("LineSpinFadeLoaderIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// Row 7
// TriangleSkewSpinIndicator
// PacmanIndicator
// BallGridBeatIndicator
// SemiCircleSpinIndicator
// export function onCreatingTriangleSkewSpinIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("TriangleSkewSpinIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingPacmanIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("PacmanIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingBallGridBeatIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("BallGridBeatIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onCreatingSemiCircleSpinIndicator(args) {
//     let indicatorView = new com.wang.avi.AVLoadingIndicatorView(androidApp.context);
//     indicatorView.setIndicator("SemiCircleSpinIndicator");
//     indicatorView.setIndicatorColor(android.graphics.Color.WHITE);
//     args.view = indicatorView;
// }
// export function onShow() {
//     indicatorView.show();
// }
// export function onHide() {
//     indicatorView.hide();
// }
//# sourceMappingURL=data:application/json;base64,